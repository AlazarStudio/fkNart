import React from 'react';
import {
  List,
  Datagrid,
  TextField,
  EditButton,
  DeleteButton,
  Create,
  Edit,
  SimpleForm,
  TextInput,
  NumberInput,
  ReferenceInput,
  SelectInput,
  DateInput,
  ImageInput,
  ImageField,
  FunctionField,
  AutocompleteInput, // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏
} from 'react-admin';
import { handleSaveWithImages } from '../JS/fileUploadUtils';
import uploadsConfig from '../../../../uploadsConfig';

// === –†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ ===
const playerPositions = [
  { id: 'GOALKEEPER', name: '–í—Ä–∞—Ç–∞—Ä—å' },
  { id: 'DEFENDER', name: '–ó–∞—â–∏—Ç–Ω–∏–∫' },
  { id: 'MIDFIELDER', name: '–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫' },
  { id: 'FORWARD', name: '–ù–∞–ø–∞–¥–∞—é—â–∏–π' },
];

const staffRoles = [
  { id: 'HEAD_COACH', name: '–ì–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä' },
  { id: 'ASSISTANT_COACH', name: '–¢—Ä–µ–Ω–µ—Ä/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç' },
  { id: 'GOALKEEPER_COACH', name: '–¢—Ä–µ–Ω–µ—Ä –≤—Ä–∞—Ç–∞—Ä–µ–π' },
  { id: 'FITNESS_COACH', name: '–¢—Ä–µ–Ω–µ—Ä –ø–æ —Ñ–∏–∑–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ' },
  { id: 'ANALYST', name: '–ê–Ω–∞–ª–∏—Ç–∏–∫' },
  { id: 'PHYSIOTHERAPIST', name: '–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç' },
  { id: 'DOCTOR', name: '–í—Ä–∞—á –∫–æ–º–∞–Ω–¥—ã' },
  { id: 'TEAM_MANAGER', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã' },
  { id: 'MASSEUR', name: '–ú–∞—Å—Å–∞–∂–∏—Å—Ç' },
  { id: 'KIT_MANAGER', name: '–≠–∫–∏–ø–∏—Ä–æ–≤—â–∏–∫' },
];

// –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ
const positionsMap = [...playerPositions, ...staffRoles].reduce(
  (acc, p) => ((acc[p.id] = p.name), acc),
  {}
);

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –ø–æ–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É (–¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–ª–µ–∫—Ç–µ)
const groupedPositions = [
  ...playerPositions.map((p) => ({ ...p, group: '–ò–≥—Ä–æ–∫–∏' })),
  ...staffRoles.map((p) => ({ ...p, group: '–¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–±' })),
];

// üìå –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
export const PlayerList = (props) => (
  <List {...props}>
    <Datagrid rowClick="edit">
      <TextField source="id" />
      <TextField source="name" label="–ò–º—è" />
      <FunctionField
        label="–ü–æ–∑–∏—Ü–∏—è / –†–æ–ª—å"
        render={(record) =>
          positionsMap[record.position] || record.position || '‚Äî'
        }
      />
      <TextField source="number" label="–ù–æ–º–µ—Ä" />
      <FunctionField label="–ö–æ–º–∞–Ω–¥–∞" render={(r) => r.team?.title || '‚Äî'} />
      <FunctionField label="–§–æ—Ç–æ" render={(r) => r.images?.length || 0} />
      <EditButton />
      <DeleteButton />
    </Datagrid>
  </List>
);

// üìå –°–æ–∑–¥–∞–Ω–∏–µ
export const PlayerCreate = (props) => (
  <Create {...props} transform={handleSaveWithImages}>
    <SimpleForm>
      <TextInput source="name" label="–ò–º—è" fullWidth />

      {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç: –ò–≥—Ä–æ–∫–∏ / –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–± */}
      <AutocompleteInput
        source="position"
        label="–ü–æ–∑–∏—Ü–∏—è / –†–æ–ª—å"
        choices={groupedPositions}
        optionText="name"
        optionValue="id"
        fullWidth
        options={{ groupBy: (choice) => choice.group }}
      />

      <NumberInput source="number" label="–ù–æ–º–µ—Ä" />
      <DateInput source="birthDate" label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" />

      <ReferenceInput source="teamId" reference="teams" label="–ö–æ–º–∞–Ω–¥–∞">
        <SelectInput optionText="title" />
      </ReferenceInput>

      <ImageInput source="imagesRaw" label="–§–æ—Ç–æ" multiple accept="image/*">
        <ImageField source="src" title="title" />
      </ImageInput>
    </SimpleForm>
  </Create>
);

// üìå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
export const PlayerEdit = (props) => (
  <Edit {...props} transform={handleSaveWithImages}>
    <SimpleForm>
      <TextInput source="name" label="–ò–º—è" fullWidth />

      {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç: –ò–≥—Ä–æ–∫–∏ / –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–± */}
      <AutocompleteInput
        source="position"
        label="–ü–æ–∑–∏—Ü–∏—è / –†–æ–ª—å"
        choices={groupedPositions}
        optionText="name"
        optionValue="id"
        fullWidth
        options={{ groupBy: (choice) => choice.group }}
      />

      <NumberInput source="number" label="–ù–æ–º–µ—Ä" />
      <DateInput source="birthDate" label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" />

      <ReferenceInput source="teamId" reference="teams" label="–ö–æ–º–∞–Ω–¥–∞">
        <SelectInput optionText="title" />
      </ReferenceInput>

      <ImageInput
        source="imagesRaw"
        label="–ù–æ–≤—ã–µ —Ñ–æ—Ç–æ"
        multiple
        accept="image/*"
      >
        <ImageField source="src" title="title" />
      </ImageInput>

      <ImageInput
        source="images"
        label="–°—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ"
        multiple
        accept="image/*"
        format={(value) =>
          value?.map((src) => ({
            src: src.startsWith('http') ? src : `${uploadsConfig}${src}`,
            title: src,
          })) || []
        }
        parse={(value) =>
          value.map((file) =>
            file.rawFile ? file.rawFile : file.src.replace(uploadsConfig, '')
          )
        }
      >
        <ImageField source="src" title="title" />
      </ImageInput>
    </SimpleForm>
  </Edit>
);
